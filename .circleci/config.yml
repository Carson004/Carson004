version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 3 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:2.6.5-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          DB_HOST: 127.0.0.1
          DB_PASSWORD: ''
          DB_USERNAME: 'root'
          RAILS_ENV: test
      - image: circleci/mariadb:10.4.11
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          TZ: 'Asia/Tokyo'
      - image: redis:4.0.14
    environment:
      TZ: 'Asia/Tokyo'
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run:
          name: Setup RubyGems and Bundler
          command: |
            sudo gem update --system

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - bundle-v2-{{ checksum "Gemfile.lock" }}
            - bundle-v2-

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 60s

      - run:
          name: Database setup
          command: |
            bin/rails db:create --trace
            bin/rails db:schema:load --trace

      - run:
          name: Run minitest
          command: |
            bundle exec rails test

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test/reports
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

      - run:
          name: Run system test
          command: |
            bundle exec rails test:system

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test/reports

      - store_artifacts:
          path: tmp/screenshots
